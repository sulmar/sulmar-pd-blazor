@rendermode InteractiveServer

<div>
    <label for="filter"><h3>Search: </h3> </label>
    <input type="text" id="filter" @bind-value="searchText" @bind-value:event="oninput" 
        @onkeyup="OnKeyUp" @ref="filterInputElementReference" />

    <p>Characters Count: @searchText.Length </p>
</div>

    <button type="button" @onclick="Search" class="btn btn-primary" disabled=@CantSearch>Search</button>


@code {

    private ElementReference filterInputElementReference;
     private bool CantSearch => !(searchText.Length > 0);
     private string searchText = string.Empty;

    [Parameter]
    public EventCallback<string> OnSearch { get; set; }

    private async Task Search()
    {
        await OnSearch.InvokeAsync(searchText);
    }

    private async Task OnKeyUp(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Search();
        }
    }

     protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await filterInputElementReference.FocusAsync();
        }
    }

   
}